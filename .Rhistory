###################################################################
# smoothing parameter h controls the "width" of the kernel functions placed over each point
# the larger the value of h the larger the UD
# the reference bandwith option supposes that the UD is a bivariate normal distribution and will overestimate if the animal has multiple activity centres
# first try with "href", not specifying grid (need to specify extent as default not working with 95%)
###--- ANIMAL_SEASON
st_geometry(HR.sf.AS)
HR.sf.AS_utm <- st_transform(HR.sf.AS, crs=26910) # utm and m units
HR.sf.AS_utm$geometry
HR.sp.AS <- as(HR.sf.AS_utm, "Spatial")
class(HR.sp.AS)
kde1.AS  <- kernelUD(HR.sp.AS[c("Animal_Season")], h = "href", kern = c("bivnorm"), grid = 80) # default extent
length(kde1.AS) # 189 Animal_Seasons
# create vector listing the h-value for each KDE
kde1.AS_href <- rep(NA, length(kde1.AS))
for (i in 1:length(kde1.AS_href )){
i.href <- kde1.AS[[i]]@h$h
kde1.AS_href[i] <- i.href
}
min(kde1.AS_href); max(kde1.AS_href); mean(kde1.AS_href)
# [1] 196.1921
# [1] 4080.896
# [1] 862.2417
# huge variation in href depending on Animal_Season
# create KDEs
ver95 <- getverticeshr(kde1.AS,95) ;   ver95.sf<- st_as_sf(ver95)
ver50 <- getverticeshr(kde1.AS,50) ;   ver50.sf<- st_as_sf(ver50)
plot(st_geometry(ver95.sf),col = "red")
plot(st_geometry(ver50.sf),col = "yellow", add = TRUE)
plot(HR.sp.AS, pch = 1, size = 0.1, add = TRUE)     # Add points
# add in meta-data and then export shapefiles
colnames(ver95.sf)[1] <- "Animal_Season"
ver95.sf <- dplyr::left_join(ver95.sf,
unique(HR.df %>% dplyr::select("Animal_Season","AnimalID","Season","Species","Sex", "Age_Class")),
by = "Animal_Season")
ver95.sf$HR_Type <- "KDE_95"
colnames(ver50.sf)[1] <- "Animal_Season"
ver50.sf <- dplyr::left_join(ver50.sf,
unique(HR.df %>% dplyr::select("Animal_Season","AnimalID","Season","Species","Sex", "Age_Class")),
by = "Animal_Season")
ver50.sf$HR_Type <- "KDE_50"
ver1AS.sf <- rbind(ver50.sf,ver95.sf)
setwd(GISDir)
st_write(ver1AS.sf,"KDE_Animal_Season_href.shp")
###--- ANIMAL_YEAR
st_geometry(HR.sf.AY)
HR.sf.AY_utm <- st_transform(HR.sf.AY, crs=26910) # utm and m units
HR.sf.AY_utm$geometry
HR.sp.AY <- as(HR.sf.AY_utm, "Spatial")
class(HR.sp.AY)
kde1.AY  <- kernelUD(HR.sp.AY[c("Animal_Year")], h = "href", kern = c("bivnorm"), grid = 80) # default extent and extent
length(kde1.AY) # 271 Animal_Year
# create vector listing the h-value for each KDE
kde1.AY_href <- rep(NA, length(kde1.AY))
for (i in 1:length(kde1.AY_href )){
i.href <- kde1.AY[[i]]@h$h
kde1.AY_href[i] <- i.href
}
min(kde1.AY_href); max(kde1.AY_href); mean(kde1.AY_href)
# [1] 114.1538
# [1] 2379.173
# [1] 862.9595
# large variation in href depending on Animal_Year
# create KDEs
ver95 <- getverticeshr(kde1.AY,95) ;   ver95.sf<- st_as_sf(ver95)
ver50 <- getverticeshr(kde1.AY,50) ;   ver50.sf<- st_as_sf(ver50)
plot(st_geometry(ver95.sf),col = "red")
plot(st_geometry(ver50.sf),col = "yellow", add = TRUE)
plot(HR.sp.AY, pch = 1, size = 0.1, add = TRUE)     # Add points
# add in meta-data and then export shapefiles
colnames(ver95.sf)[1] <- "Animal_Year"
ver95.sf <- dplyr::left_join(ver95.sf,
unique(HR.df %>% dplyr::select("Animal_Year","AnimalID","Year","Species","Sex", "Age_Class")),
by = "Animal_Year")
ver95.sf$HR_Type <- "KDE_95"
colnames(ver50.sf)[1] <- "Animal_Year"
ver50.sf <- dplyr::left_join(ver50.sf,
unique(HR.df %>% dplyr::select("Animal_Year","AnimalID","Year","Species","Sex", "Age_Class")),
by = "Animal_Year")
ver50.sf$HR_Type <- "KDE_50"
ver1AY.sf <- rbind(ver50.sf,ver95.sf)
setwd(GISDir)
st_write(ver1AY.sf,"KDE_Animal_Year_href.shp")
# for housekeeping and to reduce space, remove kde objects once output has been saved
rm(kde1.AS, kde1.AY)
###################################################################
#### RUN HREF KDE MODEL (END)
###################################################################
source("C:/Users/TBRUSH/R/HR_Analysis_Elk2022/01_MCP.R", echo=TRUE)
source("C:/Users/TBRUSH/R/HR_Analysis_Elk2022/00_TelemDataPrep.R", echo=TRUE)
source("C:/Users/TBRUSH/R/HR_Analysis_Elk2022/00_TelemDataPrep.R", echo=TRUE)
source("C:/Users/TBRUSH/R/HR_Analysis_Elk2022/00_TelemDataPrep.R", echo=TRUE)
#####################################################################################
# 00_TelemDataPrep.R
# script to prepare telemetry data for running home range analyses
# written by Joanna Burgar (Joanna.Burgar@gov.bc.ca) - 04-Oct-2019
#####################################################################################
.libPaths("C:/Program Files/R/R-4.2.0/library") # to ensure reading/writing libraries from C drive (H drive too slow)
# run libraries
library(ggplot2)    # for plotting
library(dbplyr)  # for data manipulation
library(stringr)    # for formatting character data
library(lubridate)  # for date-time conversions
library(sf)         # for uploading shapefiles and working with sf objects
library(sp)         # for changing lat/long to UTM
library(rgdal)
library(tidyverse)
# set up working directories
InputDir <- c("C:/Users/TBRUSH/R/HR_Analysis_Elk2022/Input")
OutputDir <- c("C:/Users/TBRUSH/R/HR_Analysis_Elk2022/Output")
##############################################################
#### METADATA EXPLORATION & FORMATTING (BEGINNING)
#############################################################
## load data into R
setwd(InputDir)
###--- upload animal and collar metadata files
Elk_metadata <- read_csv("Capture and Telemetry_DATABASE_April 29_2022 (version 1).csv")
# select relevant records
anml.full <- Elk_metadata %>%
mutate(CollarID = as.numeric(`Serial No.`)) %>%
filter(Make == "Vectronics",
Species == "Roosevelt elk",
CollarID >= 22585)
View(anml.full)
as.numeric(Elk_metadata$`Serial No.`)
# select relevant records
anml.full <- Elk_metadata %>%
mutate(CollarID = as.numeric(`Serial No.`)) %>%
filter(Make == "Vectronics",
Species == "Roosevelt elk",
!is.na(CollarID),
CollarID >= 22585)
View(Elk_metadata)
anml.full <- Elk_metadata %>%
filter(Make == "Vectronics",
Species == "Roosevelt elk") %>%
mutate(CollarID = as.numeric(`Serial No.`)) %>%
filter(!is.na(CollarID),
CollarID >= 22585)
###--- upload animal and collar metadata files
Elk_metadata <- read_csv("Capture and Telemetry_DATABASE_April 29_2022 (version 1).csv")
# select relevant records
anml.full <- Elk_metadata %>%
mutate(CollarID = as.numeric(`Serial No.`)) %>%
filter(Make == "Vectronics",
Species == "Roosevelt elk",
CollarID >= 22585)
anml.full <- anml.full %>%
mutate(AnimalID = as.numeric(row.names(anml.full)),
Cptr_Northing = as.numeric(`Northing (capture)`),
Cptr_Easting = as.numeric(`Easting (capture)`),
Species = as.factor(Species),
Sex = as.factor(Sex)) %>%
select(AnimalID,
CollarID,
Species,
Sex,
Age_Class = `Age Class`,
Comments,
Cptr_EPU = `Population Unit`,
Cptr_Northing,
Cptr_Easting,
Cptr_UTM = `UTM Zone (capture)`,
Cptr_Date = Date,
Cptr_Time = Time,
Rls_Date = `Release Date`,
Rls_Time = `Release Time`,
Rls_EPU = `Population Unit (release)`,
Cptr_Method = `Capture Method`,
Drug = `Immobilization Drug`,
Volume = Volume...43,
`Tick Hair Loss`:Teeth)
glimpse(anml.full) # view data
anml.full <- anml.full %>%
mutate(AnimalID = as.numeric(row.names(anml.full)),
Cptr_Northing = as.numeric(`Northing (capture)`),
Cptr_Easting = as.numeric(`Easting (capture)`),
Species = as.factor(Species),
Sex = as.factor(Sex))
anml.full <- anml.full %>%
select(AnimalID,
CollarID,
Species,
Sex,
Age_Class = `Age Class`,
Comments,
Cptr_EPU = `Population Unit`,
Cptr_Northing,
Cptr_Easting,
Cptr_UTM = `UTM Zone (capture)`,
Cptr_Date = Date,
Cptr_Time = Time,
Rls_Date = `Release Date`,
Rls_Time = `Release Time`,
Rls_EPU = `Population Unit (release)`,
Cptr_Method = `Capture Method`,
Drug = `Immobilization Drug`,
Volume = Volume...43,
`Tick Hair Loss`:Teeth)
anml.full <- anml.full %>%
select(AnimalID)
.libPaths("C:/Program Files/R/R-4.2.0/library") # to ensure reading/writing libraries from C drive (H drive too slow)
# overall process:
#- Define the area of interest per animal; availability/ vs use (MCP)
#- Export MCP shapefiles
# help files:
#https://cran.r-project.org/web/packages/adehabitatHS/adehabitatHS.pdf
# run libraries
library(bcmaps)
library(adehabitatHR)
library(dplyr)
library(ggplot2)
library(Cairo)
library(sf)
library(sp)
# set up working directories
InputDir <- c("C:/Users/TBRUSH/R/HR_Analysis_Elk2022/Input")
OutputDir <- c("C:/Users/TBRUSH/R/HR_Analysis_Elk2022/Output")
GISDir <- c("H:/ArcGIS/HR_Analysis_Elk2022")
##############################################################
#### LOAD and REVIEW DATA (BEGINNING)
#############################################################
## load data into R
setwd(InputDir)
load("HR_InputData.RData")
# review spatial object data - check to see if loaded properly
st_geometry(HR.sf) # currently in WGS84 CRS, lat/long
HR.sf$AnimalID <- as.factor(HR.sf$AnimalID)
names(HR.sf)
summary(HR.sf)
# plot to check
# check the spread of elk with mapped locations
bc <- bc_bound()
SC <- nr_districts() %>% filter(ORG_UNIT %in% c("DCK", "DSQ", "DSC"))
HR.sf.AS_utm <- st_transform(HR.sf.AS, crs=26910) # utm and m units
HR.sf.AS_utm$geometry
HR.sp.AS <- as(HR.sf.AS_utm, "Spatial")
class(HR.sp.AS)
# Calculate MCPs for each animal season
names(HR.sp.AS)
ASmcp.95 <- mcp(HR.sp.AS[,c("Animal_Season")], percent = 95)
ASmcp.50 <- mcp(HR.sp.AS[,c("Animal_Season")], percent = 50)
# Plot
plot(HR.sp.AS) # looks similar to before
plot(ASmcp.95, col = alpha(1:73, 0.5), add = TRUE)
plot(ASmcp.50, col = alpha(1:73, 0.5), add = TRUE)
# create shapefiles
# add in meta data covariates
head(HR.df)
ASmcp.95.sf <- st_as_sf(ASmcp.95)
colnames(ASmcp.95.sf)[1] <- "Animal_Season" # change id back to Animal_Season
ASmcp.95.sf <- dplyr::left_join(ASmcp.95.sf,
HR.df[c("Animal_Season","AnimalID","Season","Species","Sex", "Age_Class")],
by = "Animal_Season")
ASmcp.95.sf$HR_Type <- "MCP_95"
ASmcp.50.sf <- st_as_sf(ASmcp.50)
colnames(ASmcp.50.sf)[1] <- "Animal_Season" # change id back to Animal_Season
ASmcp.50.sf <- dplyr::left_join(ASmcp.50.sf,
HR.df[c("Animal_Season","AnimalID","Season","Species","Sex", "Age_Class")],
by = "Animal_Season")
ASmcp.50.sf$HR_Type <- "MCP_50"
# combine and write as one shapefile
setwd(GISDir)
ASmcp.sf <- rbind(ASmcp.50.sf,ASmcp.95.sf)
setwd(OutputDir)
ASmcp.50 <- st_drop_geometry(ASmcp.50.sf[!duplicated(ASmcp.50.sf$Animal_Season), ])
ASmcp.95 <- st_drop_geometry(ASmcp.95.sf[!duplicated(ASmcp.95.sf$Animal_Season), ])
ASmcp <- rbind(ASmcp.50,ASmcp.95)
write.csv(ASmcp, file = "MCP_Animal_Season.csv", row.names = FALSE)
###---
# Calculate the MCP by including 50 to 100 percent of points
par(mar=c(1,1,1,1)) # to fit in window
AS.hrs <- mcp.area(HR.sp.AS[c("Animal_Season")], percent = seq(50, 100, by = 10))
# visual inspection shows much variation in animals use of home range between 50-100% of points
AS.hrs # examine dataframe
AS.hrs.df <- as.data.frame(AS.hrs)
# setwd(OutputDir)
# write.csv(AS.hrs.df, "MCP_HRS_Animal_Season.csv")
###--- Change to a SpatialPointsDataFrame and set to utm (m units)
HR.sf.AY_utm <- st_transform(HR.sf.AY, crs=26910) # utm and m units
HR.sf.AY_utm$geometry
HR.sp.AY <- as(HR.sf.AY_utm, "Spatial")
class(HR.sp.AY)
# Calculate MCPs for each animal season
names(HR.sp.AY)
AYmcp.95 <- mcp(HR.sp.AY[,c("Animal_Year")], percent = 95)
AYmcp.50 <- mcp(HR.sp.AY[,c("Animal_Year")], percent = 50)
# Plot
plot(HR.sp.AY) # looks similar to before
plot(AYmcp.95, col = alpha(1:73, 0.5), add = TRUE)
plot(AYmcp.50, col = alpha(1:73, 0.5), add = TRUE)
# create shapefiles
# add in meta data covariates
head(HR.df)
AYmcp.95.sf <- st_as_sf(AYmcp.95)
colnames(AYmcp.95.sf)[1] <- "Animal_Year" # change id back to Animal_Year
AYmcp.95.sf <- dplyr::left_join(AYmcp.95.sf,
HR.df[c("Animal_Year","AnimalID","Year","Species","Sex", "Age_Class")],
by = "Animal_Year")
AYmcp.95.sf$HR_Type <- "MCP_95"
AYmcp.50.sf <- st_as_sf(AYmcp.50)
colnames(AYmcp.50.sf)[1] <- "Animal_Year" # change id back to Animal_Year
AYmcp.50.sf <- dplyr::left_join(AYmcp.50.sf,
HR.df[c("Animal_Year","AnimalID","Year","Species","Sex", "Age_Class")],
by = "Animal_Year")
AYmcp.50.sf$HR_Type <- "MCP_50"
# combine and write as one shapefile
setwd(GISDir)
AYmcp.sf <- rbind(AYmcp.50.sf,AYmcp.95.sf)
setwd(OutputDir)
AYmcp.50 <- st_drop_geometry(AYmcp.50.sf[!duplicated(AYmcp.50.sf$Animal_Year), ])
AYmcp.95 <- st_drop_geometry(AYmcp.95.sf[!duplicated(AYmcp.95.sf$Animal_Year), ])
AYmcp <- rbind(AYmcp.50,AYmcp.95)
write.csv(AYmcp, file = "MCP_Animal_Year.csv", row.names = FALSE)
###---
# Calculate the MCP by including 50 to 100 percent of points
par(mar=c(1,1,1,1)) # to fit in window
AY.hrs <- mcp.area(HR.sp.AY[c("Animal_Year")], percent = seq(50, 100, by = 10))
# visual inspection shows much variation in animals use of home range between 50-100% of points
AY.hrs # examine dataframe
AY.hrs.df <- as.data.frame(AY.hrs)
# setwd(OutputDir)
# write.csv(AY.hrs.df, "MCP_HRS_Animal_Year.csv")
##############################################################
#### SUMMARISE MINIMUM CONVEX POLYGON ESTIMATES (BEGINNING)
#############################################################
###--- summarise data
# Animal Year by Group Type
AYmcp.sf %>% group_by(HR_Type, Year) %>%
summarise(mean = mean(area), se = sd(area)/sqrt(n())) %>% st_drop_geometry()
# HR_Type  Year  mean    se
# 1 MCP_50   2017  670.  9.55
# 2 MCP_50   2018 1305. 10.9
# 3 MCP_50   2019 1269.  7.79
# 4 MCP_50   2020 1198.  8.51
# 5 MCP_50   2021 1248.  7.11
# 6 MCP_50   2022  591.  5.48
# 7 MCP_95   2017 2835. 27.0
# 8 MCP_95   2018 4027. 28.3
# 9 MCP_95   2019 4217. 30.7
# 10 MCP_95   2020 3886. 22.3
# 11 MCP_95   2021 3792. 15.0
# 12 MCP_95   2022 1996. 15.4
# plot out the MCP area sensitivty by year and group type
setwd(OutputDir)
AY.mcp.sens <- ggplot(AYmcp.sf, aes(x=as.factor(Year), y=area, color=HR_Type)) +
geom_boxplot() +
scale_color_brewer(palette="Dark2") +
labs(title="MCP Area Sensitivity", y = "MCP Area (ha)")+
theme(axis.title.x=element_blank())
# facet_wrap(.~Group.New, scales="free_y")
# Cairo(800, 500, pointsize = 36,
#       file="MCP_Year_Group.png", type="png", bg="white")
# AY.mcp.sens
# dev.off()
# Animal season by Group Type
ASmcp.sf %>% group_by(HR_Type, Season) %>%
summarise(mean = mean(area), se = sd(area)/sqrt(n())) %>% st_drop_geometry()
# HR_Type Season         mean    se
# 1 MCP_50  Breeding     1109.  4.73
# 2 MCP_50  Non-Breeding 1164.  6.85
# 3 MCP_95  Breeding     4221.  13.2
# 4 MCP_95  Non-Breeding 4230.  18.9
# plot out the MCP area sensitivty by year and group type
setwd(OutputDir)
AS.mcp.sens <- ggplot(ASmcp.sf, aes(x=Season, y=area, color=HR_Type)) +
geom_boxplot() +
scale_color_brewer(palette="Dark2") +
labs(title="MCP Area Sensitivity", y = "MCP Area (ha)")+
theme(axis.title.x=element_blank())
# facet_wrap(.~Group.New, scales="free_y")
Cairo(800, 500, pointsize = 36,
file="MCP_Season_Winter.png", type="png", bg="white")
AS.mcp.sens
dev.off()
##############################################################
#### SUMMARISE MINIMUM CONVEX POLYGON ESTIMATES (END)
#############################################################
##############################################################
#### HOUSEKEEPING (BEGINNING)
#############################################################
###-- Save workspace and move to KDE home range analysis - 02_KDE.R
setwd(InputDir)
save.image("01_MCP.RData")
#####################################################################################
# 02_KDE.R
# script to run KDEs
# following from 00_TelemDataPrep.R (and O1_MCP.R)
# adapted from script written by genevieve perkins (genevieve.perkins@gov.bc.ca)
# modified by Joanna Burgar (Joanna.Burgar@gov.bc.ca) - 06-Oct-2019
#####################################################################################
.libPaths("C:/Program Files/R/R-3.6.0/library")# to ensure reading/writing libraries from C drive (H drive too slow)
# overall process:
#- Define the area of interest per animal; availability/ vs use (MCP)
#- Export KDe shapefiles
# help files:
#https://cran.r-project.org/web/packages/adehabitatHS/adehabitatHS.pdf
# run libraries
library(bcmaps)
library(dplyr)
library(ggplot2)
library(Cairo)
library(sf)
library(sp)
library(adehabitatHR)
# set up working directories
InputDir <- c("C:/Users/TBRUSH/R/HR_Analysis_Elk2022/Input")
OutputDir <- c("C:/Users/TBRUSH/R/HR_Analysis_Elk2022/Output")
GISDir <- c("H:/ArcGIS/HR_Analysis_Elk2022")
##############################################################
#### LOAD and REVIEW DATA (BEGINNING)
#############################################################
## load data into R
setwd(InputDir)
load("HR_InputData.RData")
# review spatial object data - check to see if loaded properly
st_geometry(HR.sf) # currently in WGS84 CRS, lat/long
HR.sf$AnimalID <- as.factor(HR.sf$AnimalID)
names(HR.sf)
summary(HR.sf)
# plot to check
# check the spread of animals with mapped locations
bc <- bc_bound()
SC <- nr_districts() %>% filter(ORG_UNIT %in% c("DCK", "DSQ", "DSC")) # revise as appropriate to study area
###--- ANIMAL_SEASON
st_geometry(HR.sf.AS)
HR.sf.AS_utm <- st_transform(HR.sf.AS, crs=26910) # utm and m units
HR.sf.AS_utm$geometry
HR.sp.AS <- as(HR.sf.AS_utm, "Spatial")
class(HR.sp.AS)
kde1.AS  <- kernelUD(HR.sp.AS[c("Animal_Season")], h = "href", kern = c("bivnorm"), grid = 80) # default extent
length(kde1.AS) # 189 Animal_Seasons
# create vector listing the h-value for each KDE
kde1.AS_href <- rep(NA, length(kde1.AS))
for (i in 1:length(kde1.AS_href )){
i.href <- kde1.AS[[i]]@h$h
kde1.AS_href[i] <- i.href
}
min(kde1.AS_href); max(kde1.AS_href); mean(kde1.AS_href)
# create KDEs
ver95 <- getverticeshr(kde1.AS,95) ;   ver95.sf<- st_as_sf(ver95)
ver50 <- getverticeshr(kde1.AS,50) ;   ver50.sf<- st_as_sf(ver50)
plot(st_geometry(ver95.sf),col = "red")
plot(st_geometry(ver50.sf),col = "yellow", add = TRUE)
plot(HR.sp.AS, pch = 1, size = 0.1, add = TRUE)     # Add points
# add in meta-data and then export shapefiles
colnames(ver95.sf)[1] <- "Animal_Season"
ver95.sf <- dplyr::left_join(ver95.sf,
unique(HR.df %>% dplyr::select("Animal_Season","AnimalID","Season","Species","Sex", "Age_Class")),
by = "Animal_Season")
ver95.sf$HR_Type <- "KDE_95"
colnames(ver50.sf)[1] <- "Animal_Season"
ver50.sf <- dplyr::left_join(ver50.sf,
unique(HR.df %>% dplyr::select("Animal_Season","AnimalID","Season","Species","Sex", "Age_Class")),
by = "Animal_Season")
ver50.sf$HR_Type <- "KDE_50"
ver1AS.sf <- rbind(ver50.sf,ver95.sf)
setwd(GISDir)
st_write(ver1AS.sf,"KDE_Animal_Season_href.shp")
st_write(ver1AS.sf,"KDE_Animal_Season_href.shp", append-FALSE)
st_write(ver1AS.sf,"KDE_Animal_Season_href.shp", append=FALSE)
# write to csv
ver1AS.sf %>% st_drop_geometry() %>% write.csv("KDE_Animal_Season.csv")
# write to csv
setwd(OutputDir)
ver1AS.sf %>% st_drop_geometry() %>% write.csv("KDE_Animal_Season.csv")
###--- ANIMAL_YEAR
st_geometry(HR.sf.AY)
HR.sf.AY_utm <- st_transform(HR.sf.AY, crs=26910) # utm and m units
HR.sf.AY_utm$geometry
HR.sp.AY <- as(HR.sf.AY_utm, "Spatial")
class(HR.sp.AY)
kde1.AY  <- kernelUD(HR.sp.AY[c("Animal_Year")], h = "href", kern = c("bivnorm"), grid = 80) # default extent and extent
length(kde1.AY) # 271 Animal_Year
# create vector listing the h-value for each KDE
kde1.AY_href <- rep(NA, length(kde1.AY))
for (i in 1:length(kde1.AY_href )){
i.href <- kde1.AY[[i]]@h$h
kde1.AY_href[i] <- i.href
}
min(kde1.AY_href); max(kde1.AY_href); mean(kde1.AY_href)
# [1] 114.1538
# [1] 2379.173
# [1] 862.9595
# large variation in href depending on Animal_Year
# create KDEs
ver95 <- getverticeshr(kde1.AY,95) ;   ver95.sf<- st_as_sf(ver95)
ver50 <- getverticeshr(kde1.AY,50) ;   ver50.sf<- st_as_sf(ver50)
plot(st_geometry(ver95.sf),col = "red")
plot(st_geometry(ver50.sf),col = "yellow", add = TRUE)
plot(HR.sp.AY, pch = 1, size = 0.1, add = TRUE)     # Add points
# add in meta-data and then export shapefiles
colnames(ver95.sf)[1] <- "Animal_Year"
ver95.sf <- dplyr::left_join(ver95.sf,
unique(HR.df %>% dplyr::select("Animal_Year","AnimalID","Year","Species","Sex", "Age_Class")),
by = "Animal_Year")
ver95.sf$HR_Type <- "KDE_95"
colnames(ver50.sf)[1] <- "Animal_Year"
ver50.sf <- dplyr::left_join(ver50.sf,
unique(HR.df %>% dplyr::select("Animal_Year","AnimalID","Year","Species","Sex", "Age_Class")),
by = "Animal_Year")
ver50.sf$HR_Type <- "KDE_50"
ver1AY.sf <- rbind(ver50.sf,ver95.sf)
setwd(GISDir)
st_write(ver1AY.sf,"KDE_Animal_Year_href.shp")
# write to csv
setwd(OutputDir)
ver1AY.sf %>% st_drop_geometry() %>% write.csv("KDE_Animal_Year.csv")
setwd(OutputDir)
ver1AS.sf %>% st_drop_geometry() %>% write.csv("KDE_Animal_Season.csv")
View(ver1AS.sf)
source("C:/Users/TBRUSH/R/HR_Analysis_Elk2022/02_KDE.R", echo=TRUE)
